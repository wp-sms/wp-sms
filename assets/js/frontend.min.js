/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/scripts/blocks.js":
/*!**************************************!*\
  !*** ./assets/src/scripts/blocks.js ***!
  \**************************************/
/***/ (() => {

eval("jQuery(document).ready(function () {\n  wpSmsSubscribeForm.init();\n  jQuery('.wpsms-sendSmsForm').each(function () {\n    wpSmsSendSmsBlockForm.init(this);\n  });\n});\nvar wpSmsSubscribeForm = {\n  init: function init() {\n    this.info = [];\n    this.setFields();\n    this.setEventListener();\n  },\n  getGroupId: function getGroupId(element) {\n    var group_id = [];\n    var groupIdCheckboxes = element.find('input[name=\"group_id_checkbox\"]');\n    var groupIdSelect = element.find('select[name=\"group_id_select\"]');\n    groupIdCheckboxes.each(function () {\n      if (this.checked) {\n        group_id.push(this.value);\n      }\n    });\n    if (groupIdSelect && groupIdSelect.val()) {\n      group_id.push(groupIdSelect.val());\n    }\n\n    // Return an empty array instead of undefined\n    return group_id.length ? group_id : [];\n  },\n  setFields: function setFields() {\n    this.wpSmsGdprCheckbox = jQuery('.js-wpSmsGdprConfirmation');\n    this.wpSmsEventType = jQuery(\".js-wpSmsSubscribeType\");\n    this.wpSmsSubmitTypeButton = jQuery('.js-wpSmsSubmitTypeButton');\n    this.mandatoryVerify = jQuery('.js-wpSmsMandatoryVerify').val();\n  },\n  sendSubscriptionForm: function sendSubscriptionForm(element) {\n    var $this = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    var submitButton = element.find('.js-wpSmsSubmitButton');\n    var messageContainer = element.find('.js-wpSmsSubscribeMessage');\n    var processingOverlay = element.find('.js-wpSmsSubscribeOverlay');\n    var firstStep = element.find('.js-wpSmsSubscribeStepOne');\n    var firstStepSubmitButton = element.find('.js-wpSmsSubmitButton');\n    var secondStep = element.find('.js-wpSmsSubscribeStepTwo');\n    var customFields = element.find('.js-wpSmsSubscriberCustomFields');\n    var mobileField = element.find(\".js-wpSmsSubscriberMobile\");\n    submitButton.prop('disabled', true);\n    messageContainer.hide();\n    processingOverlay.css('display', 'flex');\n    var formData = new FormData();\n    formData.append('name', element.find(\".js-wpSmsSubscriberName input\").val());\n    formData.append('mobile', mobileField.find(\".iti--show-flags\").length > 0 ? mobileField.find(\"input.wp-sms-input-mobile\").val() : mobileField.find(\"input\").val());\n    var groupIds = this.getGroupId(element);\n    if (groupIds.length > 0) {\n      formData.append('group_id', JSON.stringify(groupIds));\n    }\n    formData.append('type', element.find(\".js-wpSmsSubscribeType:checked\").val());\n    customFields.each(function () {\n      var label = jQuery(this).data('field-name');\n      var value = jQuery(this).find('input').val();\n      formData.append(\"custom_fields[\".concat(label, \"]\"), value);\n    });\n    var endpointUrl = formData.get('type') === 'subscribe' ? wpsms_ajax_object.subscribe_ajax_url : wpsms_ajax_object.unsubscribe_ajax_url;\n    jQuery.ajax({\n      type: 'POST',\n      url: endpointUrl,\n      contentType: false,\n      processData: false,\n      data: formData,\n      beforeSend: function beforeSend() {\n        submitButton.prop('disabled', true).text(wpsms_ajax_object.loading_text);\n      },\n      complete: function complete() {\n        submitButton.prop('disabled', false).text(wpsms_ajax_object.subscribe_text);\n      },\n      success: function success(data) {\n        submitButton.prop('disabled', false);\n        processingOverlay.hide();\n        messageContainer.fadeIn().html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--success\">' + data.data + '</span>');\n        firstStep.hide();\n        if (formData.get('type') === 'subscribe' && $this.mandatoryVerify === '1') {\n          firstStepSubmitButton.prop('disabled', true);\n          secondStep.show();\n        }\n      },\n      error: function error(data) {\n        submitButton.prop('disabled', false);\n        processingOverlay.hide();\n        messageContainer.fadeIn().html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--error\">' + data.responseJSON.data + '</span>');\n      }\n    });\n    $this.info = Object.fromEntries(formData.entries());\n  },\n  sendActivationCode: function sendActivationCode(element) {\n    var $this = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    var activationButton = element.find('.js-wpSmsActivationButton');\n    var subscribeFormContainer = element.parents('.js-wpSmsSubscribeFormContainer');\n    var messageContainer = element.find('.js-wpSmsSubscribeMessage');\n    var processingOverlay = element.find('.js-wpSmsSubscribeOverlay');\n    var secondStep = element.find('.js-wpSmsSubscribeStepTwo');\n    activationButton.prop('disabled', true);\n    messageContainer.hide();\n    processingOverlay.css('display', 'flex');\n\n    // Update info with activation code\n    $this.info.activation = element.find('.js-wpSmsActivationCode').val();\n\n    // Create a new FormData object\n    var formData = new FormData();\n\n    // Append each key-value pair from $this.info into the FormData object\n    for (var key in $this.info) {\n      if ($this.info.hasOwnProperty(key)) {\n        formData.append(key, $this.info[key]);\n      }\n    }\n    jQuery.ajax({\n      type: 'POST',\n      url: wpsms_ajax_object.verify_subscribe_ajax_url,\n      contentType: false,\n      processData: false,\n      data: formData,\n      beforeSend: function beforeSend() {\n        activationButton.prop('disabled', true).text(wpsms_ajax_object.loading_text);\n      },\n      complete: function complete() {\n        activationButton.prop('disabled', false).text(wpsms_ajax_object.activation_text);\n      },\n      success: function success(data) {\n        activationButton.prop('disabled', false);\n        processingOverlay.hide();\n        messageContainer.fadeIn().html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--success\">' + data.data + '</span>');\n        secondStep.hide();\n      },\n      error: function error(data) {\n        activationButton.prop('disabled', false);\n        processingOverlay.hide();\n        messageContainer.fadeIn().html('<span class=\"wpsms-subscribe__message wpsms-subscribe__message--error\">' + data.responseJSON.data + '</span>');\n      }\n    });\n  },\n  setEventListener: function setEventListener() {\n    var $this = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n    this.wpSmsGdprCheckbox.on('change', function () {\n      var submitButton = jQuery(this).parents('.js-wpSmsSubscribeFormField').nextAll('.js-wpSmsSubmitButton').first();\n      submitButton.prop('disabled', !this.checked);\n    });\n    this.wpSmsEventType.on('click', function () {\n      var submitButton = jQuery(this).parents('.js-wpSmsSubscribeFormField').nextAll('.js-wpSmsSubmitButton').first();\n      submitButton.text(jQuery(this).data('label'));\n    });\n    this.wpSmsSubmitTypeButton.on('click', function (event) {\n      event.preventDefault();\n      if (jQuery(this).hasClass('js-wpSmsSubmitButton')) {\n        $this.sendSubscriptionForm(jQuery(this).parents('.js-wpSmsSubscribeForm'));\n      }\n      if (jQuery(this).hasClass('js-wpSmsActivationButton')) {\n        $this.sendActivationCode(jQuery(this).parents('.js-wpSmsSubscribeForm'));\n      }\n    });\n  }\n};\nvar wpSmsSendSmsBlockForm = {\n  init: function init(SBForm) {\n    SBForm = jQuery(SBForm);\n    this.setSendSmsBlockFields(SBForm);\n  },\n  setSendSmsBlockFields: function setSendSmsBlockFields(SBForm) {\n    var SBSubscriberGroup = SBForm.find('input[name=subscriberGroup]');\n    var SBSubmit = SBForm.find('input[type=submit]');\n    var SBMessage = SBForm.find('textarea.wpsms-sendSmsForm__messageField');\n    var SBReceiver = SBForm.find('input[name=receiver]');\n    var SBPhoneNumber = SBForm.find('input.wpsms-sendSmsForm__receiverField');\n    var SBMessageAlert = SBForm.find('p.wpsms-sendSmsForm__messageField__alert');\n    var SBResult = SBForm.find('div.wpsms-sendSmsForm__resultMessage');\n    var SBOverlay = SBForm.find('div.wpsms-sendSmsForm__overlay');\n    var SBMaxCount = SBMessage.data('max');\n    var elements = {\n      SBSubscriberGroup: SBSubscriberGroup,\n      SBSubmit: SBSubmit,\n      SBMessage: SBMessage,\n      SBReceiver: SBReceiver,\n      SBPhoneNumber: SBPhoneNumber,\n      SBMessageAlert: SBMessageAlert,\n      SBResult: SBResult,\n      SBOverlay: SBOverlay,\n      SBMaxCount: SBMaxCount\n    };\n    this.setSendSmsBlockEventListeners(elements);\n  },\n  setSendSmsBlockEventListeners: function setSendSmsBlockEventListeners(elements) {\n    jQuery(elements.SBSubmit).on('click', function (event) {\n      event.preventDefault();\n      var formData = new FormData();\n      formData.append('sender', wpsms_ajax_object.sender);\n      formData.append('recipients', elements.SBReceiver.val());\n      formData.append('message', elements.SBMessage.val());\n      formData.append('group_ids', elements.SBSubscriberGroup.val());\n      formData.append('numbers', elements.SBPhoneNumber.val());\n      formData.append('maxCount', elements.SBMaxCount);\n      jQuery.ajax({\n        url: wpsms_ajax_object.front_sms_endpoint_url,\n        method: 'POST',\n        contentType: false,\n        cache: false,\n        processData: false,\n        data: formData,\n        beforeSend: function beforeSend() {\n          jQuery(elements.SBResult).text('').fadeOut().removeClass('failed success');\n          jQuery(elements.SBOverlay).fadeIn();\n        },\n        success: function success(data) {\n          jQuery(elements.SBResult).text(data.data).fadeIn().addClass('success');\n          jQuery(elements.SBMessage).val('').trigger('input');\n          jQuery(elements.SBOverlay).fadeOut();\n        },\n        error: function error(data) {\n          var message = data.responseJSON.data && data.responseJSON.data.message ? data.responseJSON.data.message : data.responseJSON.data || 'An unexpected error occurred.';\n          jQuery(elements.SBResult).text(message).fadeIn().addClass('failed');\n          jQuery(elements.SBOverlay).fadeOut();\n        }\n      });\n    });\n    jQuery(elements.SBMessage).on('input', function () {\n      var currentCharacterCount = jQuery(this).val().length;\n      var remainingCharacterCount = elements.SBMaxCount - currentCharacterCount;\n      if (currentCharacterCount >= elements.SBMaxCount - 8) {\n        jQuery(elements.SBMessageAlert).fadeIn();\n        jQuery(elements.SBMessageAlert).find('span').text(remainingCharacterCount);\n      } else {\n        jQuery(elements.SBMessageAlert).fadeOut();\n      }\n    });\n  }\n};\n\n//# sourceURL=webpack://wp-sms/./assets/src/scripts/blocks.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/src/scripts/blocks.js"]();
/******/ 	
/******/ })()
;